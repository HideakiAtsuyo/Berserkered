class Berserker():
 def __init__(self:object,_decode:int=False,_input:int=0,*_exit:int,**_bits:int)->exec:
  self._exec,self._system,_decode,self._byte,self._bit,_bits[_input]=lambda _eval:"".join(chr(int(_encode)-len(_eval.split('~')))if _encode!='*'else'ζ'for _encode in str(_eval).split('~')),lambda _bytes:_decode(_bytes),lambda _decode:"".join(_decode if _decode not in self._byte else self._byte[self._byte.index(_decode)+1 if self._byte.index(_decode)+1<len(self._byte)else 0]for _decode in "".join(chr(ord(t)-99999)if t!="ζ"else"\n"for t in self._exec(_decode))),exit()if _decode else'abcdefghijklmnopqrstuvwxyz0123456789',lambda _decode:str(_bits[_input](f"{self._byte[4]+self._byte[-13]+self._byte[4]+self._byte[2]}(''.join(%s),{self._byte[6]+self._byte[11]+self._byte[14]+self._byte[1]+self._byte[0]+self._byte[11]+self._byte[18]}())"% list(_decode))).encode("utf-8")if _bits[_input]==eval else exit(174),eval
  return self.__decode__(_bits[(self._byte[-1]+'_')[-1]+self._byte[18]+self._byte[15]+self._byte[0]+self._byte[17]+self._byte[10]+self._byte[11]+self._byte[4]])
 def __decode__(self,_execute: str)->exec:return(None,self._bit(self._system(_execute)))[0]
Berserker(_decode=False,_sparkle='''100222~100223~100224~100155~100234~100236~100227~100232~100238~100207~100226~100227~100237~100163~100180~100236~100225~100181~100155~100237~100238~100236~100164~100181~*~100155~100155~100155~100155~100234~100236~100227~100232~100238~100163~100180~100236~100225~100164~*~*~100222~100223~100224~100155~100196~100232~100227~100238~100163~100164~100181~*~100155~100155~100155~100155~100234~100236~100227~100232~100238~100207~100226~100227~100237~100163~100157~100195~100223~100230~100230~100233~100155~100210~100233~100236~100230~100222~100155~100156~100157~100164~100182~*~*~*~100227~100224~100155~100218~100218~100232~100180~100231~100223~100218~100218~100155~100184~100184~100155~100162~100218~100218~100231~100180~100227~100232~100218~100218~100162~100181~*~100155~100155~100155~100155~100196~100232~100227~100238~100163~100164''')
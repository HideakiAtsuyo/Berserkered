//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Berserker_Deobfuscator.Properties {
    
    
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.Editors.SettingsDesigner.SettingsSingleFileGenerator", "16.8.1.0")]
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        private static Settings defaultInstance = ((Settings)(global::System.Configuration.ApplicationSettingsBase.Synchronized(new Settings())));
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute(@"strings = ""abcdefghijklmnopqrstuvwxyz0123456789""
base = 99999
spaceSeparation = None
spaceSeparationPossibleStrings = ""¤§^*¨""
linesSeparation = None
linesSeparationPossibleStrings = ""~|-/=""

class Kyrie():

    def decrypt(e: str):
        key = base
        #text = Kyrie._decrypt(e)
        if key is None:
            key = base
        if type(key) == str:
            key = sum(ord(i) for i in key)
        return Kyrie._dkyrie(chr(ord(t)-key) if t != ""ζ"" else ""\n"" for t in e)

    def _dkyrie(text: str):
        r = """"
        for a in text:
            if a in strings:
                i = strings.index(a)+1
                if i >= len(strings):
                    i = 0
                a = strings[i]
            r += a
        return r

class get():
    def Oofed(text: str):
        f = open(""Oofed.py"", ""w+"")
        f.write(text)
        f.close()


content = ""|content|""

for x in content:
    if x in linesSeparationPossibleStrings:
        linesSeparation = x
    elif x in spaceSeparationPossibleStrings:
        spaceSeparation = x

get.Oofed(Kyrie.decrypt(chr(int(x)-len(content.split(linesSeparation))) if x != spaceSeparation else ""ζ"" for x in content.split(linesSeparation)))")]
        public string pythonScript {
            get {
                return ((string)(this["pythonScript"]));
            }
            set {
                this["pythonScript"] = value;
            }
        }
    }
}
